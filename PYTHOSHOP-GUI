"""
Program editing images and photos using GUI
"""

import os
from tkinter import *
from tkinter import messagebox
from tkinter.filedialog import *
from PIL import Image, ImageTk, ImageFilter

def open_pic(open):    #Otwiera zdjęcie.
    try:
        global file_name,imgtk,img,file_extension
        file_name, file_extension = os.path.splitext(askopenfilename())
        img=Image.open(file_name+file_extension)
        imgtk=ImageTk.PhotoImage(img)
        destroy_widget(open)
        try:
            reload_pic(img)
        except NameError:
            show_pic(imgtk)
    except AttributeError:
        pass 
    
def show_pic(filetk):    #Wyświetla obraz klasy ImageTk jako Label.
    global label
    label = Label(image=filetk)
    label.image = filetk
    label.pack()

def destroy_widget(widget):
    widget.destroy()

def reload_pic(file):    #Usuwa wyświetlony obrazek i wyświetla nowy, obrobiony zamiast niego.
    global label,imgtk
    label.destroy()
    imgtk=ImageTk.PhotoImage(file)
    show_pic(imgtk)

def save(name):    #Nadpisuje edytowane zdjęcie.
    global img
    img.save(name+file_extension)
    messagebox.showinfo("Save", "Save completed")

def save_as():    #Zapisuje edytowane zdjęcie jako nowy plik.
    global img
    toplevel=Toplevel(height=150,width=200)
    toplevel.title("Choose a name")
    description=Label(toplevel,text="Write a name of the file:")
    description.place(x=35,y=0)
    give_name=Entry(toplevel)
    give_name.place(x=35,y=50)
    save_button = Button(toplevel,text ="Save as...",command= lambda:[img.save(give_name.get()+file_extension),destroy_widget(toplevel),messagebox.showinfo("Save", "Save completed")])
    save_button.place(x=65,y=100)
    
def black_n_white_filter():    #8 funkcji dodających filtry do zdjęć
    global img
    img = img.convert("L")
    reload_pic(img)
    messagebox.showinfo("black & white", "filter added")
    
def blur_filter():
    global img
    img = img.filter(ImageFilter.BLUR)
    reload_pic(img)
    messagebox.showinfo("blur", "filter added")

def contour_filter():
    global img
    img = img.filter(ImageFilter.CONTOUR)
    reload_pic(img)
    messagebox.showinfo("contour", "filter added")

def edge_enhance_more_filter():
    global img
    img = img.filter(ImageFilter.EDGE_ENHANCE_MORE)
    reload_pic(img)
    messagebox.showinfo("edge enhance", "filter added")

def emboss_filter():
    global img
    img = img.filter(ImageFilter.EMBOSS)
    reload_pic(img)
    messagebox.showinfo("emboss", "filter added")

def find_edges_filter():
    global img
    img = img.filter(ImageFilter.FIND_EDGES)
    reload_pic(img)
    messagebox.showinfo("find edges", "filter added")

def sharpen_filter():
    global img
    img = img.filter(ImageFilter.SHARPEN)
    reload_pic(img)
    messagebox.showinfo("sharpen", "filter added")

def smooth_more_filter():
    global img
    img = img.filter(ImageFilter.SMOOTH_MORE)
    reload_pic(img)
    messagebox.showinfo("smooth more", "filter added")

def rotate():    #Obraca zdjęcie
    global img
    img = img.rotate(90)
    reload_pic(img)

#Przy dodawaniu funkcji przerabiających obraz trzeba wczytać globalną  zmienną, którą chcemy zmieniać (jako global nazwa_zmiennej). Dla samego użycia  nie trzeba wczytywać jej do funkcji

def instasize():   #Zmienia zdjęcie w kwadrat
    global img
    img=img.resize((400,400))
    reload_pic(img)
    messagebox.showinfo("Done!")




main_window=Tk()

open=Button(main_window, text="Open a file",command=lambda:open_pic(open))
open.place(x=60,y=50)

menubar = Menu(main_window)
filemenu = Menu(menubar, tearoff=0)
menubar.add_cascade(label="File", menu=filemenu)
filemenu.add_command(label="Open", command=lambda:open_pic(open))
filemenu.add_command(label="Save", command=lambda:save(file_name))
filemenu.add_command(label="Save as...", command=save_as)

filters_Menu = Menu(menubar, tearoff=0)
filters_Menu.add_command(label="Black & White", command=black_n_white_filter)
filters_Menu.add_command(label="Blur", command=blur_filter)
filters_Menu.add_command(label="Contour", command=contour_filter)
filters_Menu.add_command(label="Edge enhance", command=edge_enhance_more_filter)
filters_Menu.add_command(label="Emboss", command=emboss_filter)
filters_Menu.add_command(label="Find edges", command=find_edges_filter)
filters_Menu.add_command(label="Sharpen", command=sharpen_filter)
filters_Menu.add_command(label="Smooth", command=smooth_more_filter)
menubar.add_cascade(label="Filters", menu=filters_Menu)

menubar.add_command(label="Rotate", command=rotate)

resize_Menu=Menu(menubar, tearoff=0)
menubar.add_cascade(label="Resize", menu=resize_Menu)
resize_Menu.add_command(label="Instasize", command=instasize)


menubar.add_command(label="Exit", command=main_window.quit)

main_window.config(menu=menubar)
main_window.mainloop()
